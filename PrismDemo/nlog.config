<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Info">

  <!-- enable asp.net core layout renderers -->
  <extensions>
    <add assembly="NLog.Web.AspNetCore"/>
  </extensions>

  <variable name="logDirectory" value="${basedir}\logs"/>

  <!-- the targets to write to -->
  <targets>
    <!-- 普通的日志写这里  -->
    <target xsi:type="File"
            name="mylogFile"
            fileName="${logDirectory}\all-${shortdate}.log">
      <layout xsi:type="JsonLayout">

        <attribute name="time" layout="${longdate}" />

        <attribute name="level" layout="${level}"/>
        <attribute name="name" layout="${logger}"/>

        <attribute name="message" layout="${message}" />
      </layout>
    </target>


    <target xsi:type="File"
            name="myerrorFile"
            fileName="${basedir}\logs\allerror-${shortdate}.log">
      <layout xsi:type="JsonLayout">

        <attribute name="time" layout="${longdate}" />
        <attribute name="level" layout="${level}"/>
        <attribute name="name" layout="${logger}"/>

        <attribute name="message" layout="${message}" />

        <!--  详细的异常信息会写这里  https://github.com/NLog/NLog/wiki/Exception-Layout-Renderer -->
        <attribute name="errorinfo" layout="${exception:format=toString}" />

      </layout>
    </target>



    <target name="filea1" xsi:type="File"
             fileName="${basedir}\logs\${shortdate}.txt"
             layout="时间:${longdate} ${newline}等级:${level} ${newline}订单(orderId):${event-properties:item=orderId}${newline}我消息:${event-properties:item=msg}${newline}我数据:${event-properties:item=mydata}${newline}message:${message}${newline}"/>


    <!--  指定名称 日志输出 -->
    <target name="mylogfileabc"
        xsi:type="File"
        fileName="${basedir}\logs\${shortdate}_123456.txt"
        layout="${longdate} ${level}  ${message}"     />



    <target name="filemy1" xsi:type="File"
             fileName="${basedir}\logs\${shortdate}_orderId${event-properties:item=orderId}.log"
             layout="时间:${longdate} ${newline}等级:${level} ${newline}订单(orderId):${event-properties:item=orderId}${newline}我消息:${event-properties:item=msg}${newline}我数据:${event-properties:item=mydata}${newline}objval:${event-properties:item=objval:objectPath=TemperatureC}${newline}message:${message}${newline}"/>

    <!-- 
       下面是：格式化输出
        -->
    <target xsi:type="File" name="filemyjson1"
            fileName="${basedir}\logs\${shortdate}_orderId_${event-properties:item=orderId}.log">
      <!-- 
      includeAllProperties="true"     旧版本用这个 
      includeEventProperties="true"   5.0新版本有这个属性
      layout 节点如果配置这个，就不用一个个再配置自定义参数的输出,它会自动输出全部自定义参数
        -->
      <layout xsi:type="JsonLayout"   includeEventProperties="true" >
        <!--
           特别说明:callsite比较耗费性能,生产环境下不建议使用
         
           <attribute name="callsiteinfo" layout="${callsite:className=True:fileName=True:includeSourcePath=True:methodName=True}" />
           
           <attribute name="stacktraceinfo" layout="${stacktrace}" />
 
        自定义参数的输出
        <attribute name="orderId" layout="${event-properties:item=orderId}"/>
        <attribute name="msg" layout="${event-properties:item=msg}"/>
        <attribute name="mydata" layout="${event-properties:item=mydata}"/>
        <attribute name="objval" layout="${event-properties:item=objval}"/>
         -->

        <attribute name="time" layout="${longdate}" />

        <attribute name="level" layout="${level}"/>
        <attribute name="name" layout="${logger}"/>
        <attribute name="message" layout="${message}" />
      </layout>

    </target>


    <target xsi:type="File" name="filemyids"
             fileName="${basedir}\logs\${shortdate}_ids${event-properties:item=ids}.log">

      <layout xsi:type="JsonLayout"   includeEventProperties="true" >


        <attribute name="time" layout="${longdate}" />

        <attribute name="level" layout="${level}"/>
        <attribute name="name" layout="${logger}"/>
        <attribute name="message" layout="${message}" />
      </layout>

    </target>
  </targets>



  <!-- rules to map from logger name to target -->
  <rules>


    <!-- final="true" 过滤掉了"Microsoft.*"的日志，所以下面的就只记录自己的日志
    就是过滤掉系统日志，这样下面的规则就是记录自己日志
    
    没有writeTo就不会输出日志   
     
    -->
    <logger name="Microsoft.*" maxlevel="Info" final="true" />

    <!-- 由于上面的过滤了系统的log，这里只输出自己的日志 -->


    <logger name="WebApplog.Controllers.*"
            level="Trace"
            writeTo="filemy1,filemyjson1">

      <!-- 
      defaultAction="Log" 就是默认写入 
      defaultAction="Ignore" 就是默认忽略，不写入
      参考：  https://github.com/nlog/nlog/wiki/When-filter  -->
      <filters defaultAction="Ignore">

        <!-- action="Ignore" 满足条件就忽略掉，不写日志
             action="Log"  满足条件就写日志
        -->
        <!--  因为消息中包含 orderinfo，所以下面2种判断方式都是可以的
        <when condition="contains(message, 'orderinfo')" action="Log" />
        <when condition="starts-with(message, 'orderinfo')" action="Log" />
        -->
        <when condition="starts-with(message, 'orderinfo')" action="Log" />

        <!--  官网demo,留着参考
            <when condition="exception != null" action="Log" />
            <when condition="length(message) > 100" action="Ignore" />
            <when condition="'${OnHasProperties:1}' != ''" action="Ignore" />
            <when condition="logger == 'MyApps.SomeClass'" action="Ignore" />
            <when condition="(level >= LogLevel.Debug and contains(message, 'PleaseDontLogThis')) or level==LogLevel.Warn" action="Ignore" />
            <when condition="not starts-with(message, 'PleaseLogThis')" action="Ignore" />            
            -->
      </filters>

    </logger>


    <logger name="WebApplog.Controllers.*"
        level="Trace"
        writeTo="filemyids">

      <filters defaultAction="Ignore">
        <when condition="contains(message, 'ids')" action="Log" />
      </filters>

    </logger>


    <logger name="*" level="Info" writeTo="mylogFile" />

    <!--  Exception,这个日志输出 -->
    <logger name="*" level="Error" writeTo="myerrorFile" />

    <!--  指定名称,这个日志输出 -->
    <logger name="myname1" minlevel="Trace" writeTo="filea1"/>



    <!--  指定名称 日志输出 -->
    <logger name="mylognameabc"
            level="Info"
            writeTo="mylogfileabc"/>
  </rules>
</nlog>
